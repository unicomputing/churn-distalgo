import random
import time
import configparser 
import sys
import statistics
from tabulate import tabulate
import csv
certify = import_da('certify')

"""
Comments Dictionary
@@@ - new lines added
      if before a function then whole function is new
$$$ - exact copy from algorithm
"""
# ---------------------------------------- #
#                NODE CLASS                #
# ---------------------------------------- #
class Node (process, certify.Interceptor):
    def setup(known_nodes, scheduler, certifier, ALPHA, BETA, GAMMA, DELTA, NUM_INIT_NODE, D, RETEN_COUNT, config_name):
        self.custom_config = configparser.ConfigParser()
        self.custom_config.read('config.ini')

        # ************************************************** #
        # ---------- Variables for managing churn ---------- #
        # ************************************************** #
        # for initial node, known_nodes is all the other initial nodes; otherwise it is empty set
        # whether node has joined the system
        self.is_joined = bool(known_nodes)  # $$$
        # number of enter-echo msgs to receive before joining
        self.join_bound = 0  # $$$
        # number of enter-echo messages received
        self.join_counter = 0  # $$$
        # true only when Node has received enough left messages, False by default
        self.is_left = False
        # number of leave-req-echo msgs to receive before joining
        self.leave_bound = 0  # @@@
        # number of enter-echo messages received
        self.leave_counter = 0  # @@@
        # sequence number for system state maintained separately by each process
        self.state_num = 0 # @@@
        # number of sequence number the changes of a left node needs to be retained
        self.retention_limit = int(RETEN_COUNT) # @@@
        # Initially assume every known node has entered and joined
        # set of ENTER, LEAVE, and JOINED events known to node
        self.Changes = (setof(('enter',state_num,q), q in known_nodes) | setof(('join',state_num,q), q in known_nodes))  # @@@
        # add to changes if self is one of the initial nodes
        if (known_nodes):  # $$$
            Changes.add(('enter', state_num, self))  # @@@
            Changes.add(('join', state_num, self))  # @@@

        # ***************************************************************************************** #
        # ---------- Variables for managing churn and reading/writing simulated register ---------- #
        # ***************************************************************************************** #
        # latest register value known to node
        self.val = None  # $$$
        # sequence number of latest value known to node
        self.num = 0  # $$$
        # id of node that wrote latest value known to node
        self.w_id = None  # $$$

        # ********************************************************************** #
        # ---------- Variables for reading/writing simulated register ---------- #
        # ********************************************************************** #
        # temporary storage for value being read or written
        self.temp = 0  # $$$
        # uniquely identify read and write phases of an operation to ensure total ordering
        self.tag = 0  # $$$
        # number of replies/acks needed to finish a phase
        self.rw_bound = 0  # $$$
        # number of replies/acks received for a phase
        self.rw_counter = 0  # $$$
        # whether a read phase is in progress
        self.rp_pending = False  # $$$
        # whether a write phase is in progress
        self.wp_pending = False  # $$$
        #  whether a read operation is in progress
        self.read_pending = False  # $$$
        # whether a write operation is in progress
        self.write_pending = False  # $$$
        # code for node entering the system AFTER initial time, in response
        # to receiving enter-signal message from scheduler
        self.cpu_start_time = time.process_time()  # @@@
        # ************************************************************** #
        # ---------- Code for node not part of initial system ---------- #
        # ************************************************************** #
        # entering in response to receiving enter-signal message from scheduler

        if known_nodes == set():  # $$$
            Changes.add(('enter', state_num, self))  # $$$
            bcast('enter', state_num, self)  # @@@
            send('enter', to=certifier)
            output('entered, bcasted enter msgs')  # $$$

        # -------------------- End of Node setup method -------------------- #
        # Broadcast is peformed by scheduler which has perfect global knowledge of nodes preset in system

    # @@@
    def delayed_send(m, rec):
        # Simulating real network by introducing random delay for each message transmission
        # Reference: arXiv:1708.03274 [cs.DC] Hagit Attiya, Hyun Chul Chung, Faith Ellen, Saptaparni Kumar, and Jennifer L. Welch,
        # "Simulating a Shared Register in a System that Never Stops Changing", August 26, 2018.page 2, para 4 line 3
        delay = random.randint(0, float(D)*100)/100
        if await(False):pass
        elif timeout(delay): pass
        send(m, to=rec)


    def bcast(*m):
        # adding random delay for all broadcast messages
        delayed_send(('bcast',m), scheduler)  # @@@


    # ******************************************************************* #
    # ----------------- Methods for managing the churn ------------------ #
    # ******************************************************************* #
    def Present():
        # set of nodes that p believes are currently present (entered but not left)
        return setof(q, ('enter', _, q) in Changes, not some(('leave', _, _q) in Changes)) # @@@



    def receive(msg = ('enter',sn,p)):
        # receive message from entering nodes, add to local changes and broadcast to other nodes
        Changes.add(('enter',sn,p)) # @@@
        # this is not really required as intitial sn for a node is always 0
        if sn > state_num: # @@@
            state_num = sn # @@@
        # Discard messages from Changes that satisfy any of the below condition:
        # 1. Message from node that has left and the message is not 'leave'
        # 2. Message is 'leave' and message has passed retention limit
        Changes = setof((state, seq_num, q), (state, seq_num, q) in Changes,
            not some(('leave', _, _q) in Changes) or state == 'leave' and state_num - seq_num < retention_limit) # @@@
        # Changes = setof((state,seq_num,q),
        #     (state,seq_num,q) in Changes,
        #     ('leave',seq_num,q) not in Changes or state == 'leave' and state_num - seq_num < retention_limit)
        bcast('enter-echo', Changes, (val, num, w_id, state_num), is_joined, p) # @@@


    def receive(msg = ('enter-echo', C, (v, s, i, sn), j, p)):
        # checking sequence number and id for process entering with given process id
        if sn > state_num: # @@@
            state_num = sn # @@@
        if (s, i) > (num, w_id, id):  # $$$
          val, num, w_id = v, s, i  # $$$
        Changes = Changes | C  # $$$
        # Remove all the joins and enters of the node that have left but not "leaves"
        if (not is_joined) and (p == self):  # $$$
            if (j == True) and (join_bound == 0):  # $$$
                #since we are counting join_bound on basis of info from an already joined node
                join_bound = float(GAMMA) * len(Present())  # $$$
                output('join_bound set to', join_bound, 'based on Present size of', len(Present()))  # $$$
            join_counter += 1  # $$$
            if (join_counter >= join_bound) and (join_bound > 0):  # $$$
                #we do need join_bound >0 condition because the first few enter-echo messages can be from process not joined in
                #the system and in this case the join_counter will exceed join_bound which was never set
                is_joined = True  # $$$
                state_num += 1 # @@@
                output('joined')  # $$$
                # Discard messages from Changes that satisfy any of the below condition
                # 1. Message from node that has left and the message is not 'leave'
                # 2. Message is 'leave' and message has passed retention limit
                # output("Changes:", Changes)
                output('size of Changes: {0}'.format(len(Changes))) #@@@
                Changes = setof((state, seq_num, q), (state, seq_num, q) in Changes,
                    not some(('leave', _, _q) in Changes) or state == 'leave' and state_num - seq_num < retention_limit)
                # Changes = setof((state,seq_num,q),
                #     (state,seq_num,q) in Changes,
                #     ('leave',seq_num,q) not in Changes or state == 'leave' and state_num - seq_num < retention_limit)  # @@@
                output('size of Changes: {0} and state_num:{1}'.format(len(Changes), state_num)) #@@@
                # output("Changes:", Changes)
                Changes.add(('join',state_num,self))  # $$$

                # tell scheduler I've joined
                delayed_send(('joined'), scheduler)  # @@@
                send(('joined'), to=certifier)
                output('sent joined to scheduler')  # $$$
                bcast('joined',state_num,self)  # $$$


    def receive(msg = ('joined', sn, p)):
        # received joined message from process id and broadcast the msg forward
        # Changes  = c
        if sn > state_num:  # @@@
            state_num = sn  # @@@
        Changes.add(('join',sn,p))  # @@@
        # enter always have 0 sequence number to maintain consistency when node receives join but no enter
        # also enter sequence number is not important at all
        Changes.add(('enter',0,p))  # @@@
        bcast('joined-echo',sn,p)  # @@@


    # $$$
    def receive(msg = ('joined-echo', sn, p)):
        # recieved joined echo about from process id
        # Changes = c
        if sn > state_num:  # @@@
            state_num = sn  # @@@
        Changes.add(('join',sn,p))
        # enter always have 0 sequence number to maintain consistency when node receives join but no enter'
        # also enter sequence number is not important at all
        Changes.add(('enter',0,p))


    def receive(msg = ('leave-signal')):
        # node leaves in response to 'leave-signal' msg from scheduler
        output('received leave signal')  # @@@
        # issue a leave request simillar to enter
        bcast('leave-req', state_num, self)  # @@@


    #  @@@
    def receive(msg = ('leave-req',sn,p)):
        # receive message from leaving node, add to local changes and broadcast to other nodes
        if sn > state_num:
            state_num = sn
        # leave-req sequence number is not important adding just for the sake of consistency(same as enter)
        Changes.add(('leave-req',sn,p))
        bcast('leave-req-echo', Changes, (val, num, w_id, state_num), is_joined, p)


    #  @@@
    def receive(msg = ('leave-req-echo', C, (v, s, i, sn), j, p)):
        # checking sequence number, state num and id for process leaving with given process id
        if sn > state_num:
            state_num = sn
        if (s, i) > (num, w_id, id):
          val, num, w_id = v, s, i
        Changes = Changes | C
        # output('size of Changes: {0}'.format(len(Changes)))
        # Changes = setof((state,_,q), (state,_,q) in Changes, ('leave',_,q) not in Changes or state == 'leave')
        if (p == self) and (not is_left):
            if (j == True) and (leave_bound == 0):
                leave_bound = float(GAMMA) * len(Present())
                output('leave_bound set to', leave_bound, 'based on Present size of', len(Present()))
            leave_counter += 1
            if (leave_counter >= leave_bound) and (leave_bound > 0):
                is_left = True
                state_num += 1
                output('size of Changes: {0} and state_num:{1}'.format(len(Changes), state_num))
                bcast('leave',state_num,self)
                send(('leave'), to=scheduler)  # @@@
                send(('leave'), to=certifier)
                output('exiting...')
                exit()


    def receive(msg = ('leave',sn,p)):
        # received leave about process with id
        Changes.add(('leave',sn,p))
        if sn > state_num:
            state_num = sn
        # Changes = Changes - {('enter',p), ('join',p)}  # @@@
        # Changes = Changes - setof(('leave',seq_num,q), ('leave',seq_num,q) in Changes, sn - seq_num > retention_limit) # @@@
        bcast('leave-echo',sn,p)  # @@@


    def receive(msg = ('leave-echo',sn,p)):
        # output received leave-echo about process id
        # Changes = Changes - {('enter',p), ('join',p)}  # @@@
        if sn > state_num:
            state_num = sn
        Changes.add(('leave',sn,p))  # $$$


    # ************************************************************* #
    # ---------- Methods for simulating reads and writes ---------- #
    # ************************************************************* #
    # $$$
    def Members():
        # set of nodes that p believes are currently members (joined but not left)
        return setof(q, ('join', _, q) in Changes, not some(('leave', _, _q) in Changes)) # @@@


    def receive(msg='read'):
        # Receive request to read register from other processes
        output('read invoked')  # $$$
        # Needed to measure the timestamp of the read request
        send(('readstarttime', num, w_id), to=scheduler)  # @@@
        read_pending = True  # $$$
        begin_read_phase()  # $$$


    # $$$
    def receive(msg = ('write', v)):
        # Receive request to write to register from other processes
        output('write invoked, value:', v)
        write_pending = True
        temp = v
        begin_read_phase()


    # $$$
    def begin_read_phase():
        output('begin read phase')
        tag += 1
        bcast('query', tag, self)
        rw_bound = float(BETA) * len(Members())
        output('rw_bound set to', rw_bound, 'based on Members size of', len(Members()))
        # in case of multiple reads this helps in differentiating reads and associated counter
        rw_counter = 0
        rp_pending = True

    # $$$
    def receive(msg = ('reply', (v, s, i), rt, p)):
        # receive a reply msg for query nodes
        if rp_pending and (rt == tag) and (p == self):
            if (s, i) > (num, w_id):
                val, num, w_id = v, s, i
            rw_counter += 1
            if (rw_counter >= rw_bound):
                rp_pending = False
                begin_write_phase()


    def begin_write_phase():
        output('begin write phase')  # $$$
        if write_pending:  # $$$
            val = temp  # $$$
            num += 1  # $$$
            w_id = self  # $$$
        if read_pending:  # $$$
            temp = val  # $$$
        bcast('update', (temp, num, w_id), tag, self)  # $$$
        if write_pending:  # @@@
            # Required to calculate the total ordering
            send(('writeupdatetime', num, w_id, temp), to=scheduler)  # @@@
        else:  # @@@
            send(('readendtime', num, w_id, temp), to=scheduler)  # @@@
        output('updated values are being sent as value,sequence,w_id',temp,num,w_id)  # $$$
        rw_counter = 0  # $$$
        wp_pending = True  # $$$


    # $$$
    def receive(msg = ('ack',wt,p)):
        if wp_pending and (wt == tag) and (p == self):
            rw_counter += 1
            if (rw_counter >= rw_bound):
                wp_pending = False
                if (read_pending):
                    read_pending = False
                    #make scheduler note the time here
                    delayed_send(('return',temp), scheduler)
                    send(('return',temp), to=certifier)
                if (write_pending):
                    write_pending = False
                    #make scheduler note the time here
                    delayed_send('ack', (scheduler))
                    send('ack', to=certifier)


    # ************************************************************* #
    # --------------------- SERVER code follows ------------------- #
    # ************************************************************* #
    def receive(msg= ('update', (v, s, i), wt, q)):
        # Handle an update message
        if w_id == None or (s, i) > (num, w_id):  # @@@
            val, num, w_id = v, s, i  # $$$
        if is_joined:  # $$$
            bcast('ack', wt, q)  # $$$
        bcast('update-echo', (val, num, w_id))  # $$$


    # $$$
    def receive(msg = ('query', rt, p)):
        # Handle an update message
        if is_joined:
            bcast('reply', (val, num, w_id), rt, p)
            #output('sent a reply message for query message with val ,num and w id as ',val, num, w_id)


    # $$$
    def receive(msg = ('update-echo', (v, s, i))):
        # Handle an update echo message
        if (s, i) > (num, w_id):
            val, num, w_id = v, s, i


    # @@@
    def receive(msg ='sleep'):
        output('sleeping for 1 second')
        time.sleep(int(custom_config['PERFORMANCE']['sleep_time_node']))


    # @@@
    def receive(msg= 'done'):
        # output('Leaves:', setof((stn, p), ('leave', stn, p) in Changes))
        send(('metrics', time.process_time()-cpu_start_time, Members()), to=scheduler)
        exit()


    # ************************************************************* #
    # ---------------------------- RUN ---------------------------- #
    # ************************************************************* #
    def run():
        # output('size of Changes: {0}'.format(len(self.Changes)))
        await(False) # Wait till the condition is true
        output('node', self, 'at end of run')


# ---------------------------------------- #
#             SCHEDULER CLASS              #
# ---------------------------------------- #
class Scheduler (process):
    def setup(certifier, ALPHA, BETA, GAMMA, DELTA, NUM_INIT_NODE, D, RETEN_COUNT, config_name):
        self.custom_config = configparser.ConfigParser()
        self.custom_config.read('config.ini') 
        self.nodes = new(Node, num=int(NUM_INIT_NODE))
        #### Variable declarations
        self.allnodes = nodes
        self.joined = nodes
        self.entered = nodes
        # A map with process_id -> time_taken_from_enter_to_join
        self.join_times = {}
        # A map with process_id -> time_taken_from_leave-req_to_leave
        self.leave_times = {}
        # A map with process_id -> [time_taken_to_write]
        self.write_times = {} 
        # A map with process_id -> [time_taken_to_read]
        self.read_times={}
        # to keep a track of crashed nodes. Crash nodes are the failed nodes that scheduler doesn't know about. 
        self.crash_nodes=set()
        # to keep a track of left nodes 
        self.left_nodes=set()
        # A process is considered in-use of a request has been issued to it
        # for either a read or a write
        self.in_use = set()
        # read write timestamps to check the order
        self.readwriteorder = []
        # enter leave times to check intervals of time
        self.enterleaveorder = []
        # crash nodes order to check intervals of time
        self.crashorder = []
        # max allowed delay for one message
        #### END Variable declarations

        self.max_delay = float(D)
        # delay adjustment to account for cpu time
        self.delay_adjustment = float(self.custom_config["GENERAL"]["delay_adjustment"])
        #### END Variable declarations
        self.join_delay = (max_delay * 4)  + delay_adjustment
        # Variable to check eventual consistency of all leave operation
        self.success = True

        for p in nodes: setup(p, [nodes-{p}, self, certifier, ALPHA, BETA, GAMMA, DELTA, NUM_INIT_NODE, D, RETEN_COUNT, config_name])
        start(nodes)
        output('nodes present initially are', nodes)


    def print_stats():
        table = [["Process ID", "Join Time", "Reason"]]
        for pid in join_times:
            if pid in joined and join_times[pid] < 8*max_delay+100:
                table.append([pid, join_times[pid], "-"])
            else:
                if pid in crash_nodes:
                    table.append([pid, "-", "CRASHED"])
                elif pid in left_nodes:
                    table.append([pid, "-", "LEFT"])
        print(tabulate(table, headers="firstrow", tablefmt="grid"))
        table = [["Process ID", "Leave Time", "Reason"]]
        for pid in leave_times:
            if pid not in nodes and leave_times[pid] < 8*max_delay+100:
                table.append([pid, leave_times[pid], "-"])
            else:
                table.append([pid, "-", "-"])
        print(tabulate(table, headers="firstrow", tablefmt="grid"))


    def churn_random_nodes(count):
        for _ in range(count):
            test_enter()
            if random.choice(["enter", "leave"]) == "enter":
                test_enter()
            else:
                p = random.choice(list(joined-left_nodes-crash_nodes))
                output('randomly chosen node is', p)
                test_leave(p)


    def churn_nodes_sync_async(count):
        i = 0
        for _ in range(count):
            output('Enter-Leave count: {0}'.format(i))
            # to decide whether to make operation is async or sync
            r=random.randint(1,10)
            if random.choice(["enter", "leave"]) == "enter":
                p = test_enter()
            else:
                p = random.choice(list(joined-left_nodes-crash_nodes))
                output('randomly chosen node is', p)
                p = test_leave(p)
            i += 1
            if r > 0:
                if await(received('joined', from_= p) or received('leave', from_= p)): pass
                elif timeout(int(join_delay)): pass

    def test_consistency():
        # Just a bunch random tests. Here we go completely crazy and make things crazy
        # check_condition_1()
        rounds= int(custom_config['GENERAL']['num_of_rounds'])
        for i in range(rounds):
            output('ROUND NUMBER:',i)
            # churn_random_nodes(int(custom_config['GENERAL']['churn_count']))
            churn_nodes_sync_async(int(custom_config['GENERAL']['churn_count']))
            p= random.choice(list(nodes-left_nodes-crash_nodes))

            r=random.randint(1,10)              #crash with a random probability
            if (r>1):
                crash_node(p)
                output('Randomly chosen node to crash ',p)

            r=random.randint(1,10)
            if (r>0):                           #simulating network delay for a random node
                p=random.choice(list(nodes-left_nodes-crash_nodes))
                output('Sending sleep to ',p)
                send('sleep',to=p)
            # Bits to identify whether we randomly do a read of a write 
            # If we have a True as the o/p of random choice then we do a read
            READ = True
            WRITE = False
            for x in range(int(custom_config["GENERAL"]["num_read_writes"])):
                read_or_write = random.choice([True, False])
                allowed_nodes = list(nodes-left_nodes-crash_nodes-in_use)
                if allowed_nodes:
                    p = random.choice(allowed_nodes)
                    output('randomly chosen node is: ', p)
                    in_use.add(p)
                    if read_or_write == READ:
                        test_read(p)
                        output("Issuing a read command")
                    else:
                        val = random.randint(1,100)
                        output("Issuing a write command with value: ", val)
                        test_write(p, val)
                else:
                    output("No nodes present to perform read or write operation")      
                    output("Skipping one round...")
                    rounds-=1
                    break

    def run():
        send(('register',nodes), to=certifier)
        test_consistency()
        output('Exited the loop')
        await(received('done'))
        output('scheduler terminating')


    def test_enter():
        send('enter-request', to=certifier)

    def receive(msg='perform-enter'):
        p = new(Node, [set(), self, certifier, ALPHA, BETA, GAMMA, DELTA, NUM_INIT_NODE, D, RETEN_COUNT, config_name])
        start(p)
        nodes.add(p)

    def receive(msg='joined', from_=p):
        output('join operation completed for ', p)


    def test_leave(p):
        send(('leave-request', p), to=certifier)


    def receive(msg=('perform-leave',p)):
        send('leave-signal', to= p)
        output('making {0} node leave'.format(p))
        # to avoid calling leave/join/crash operation on already left node
        left_nodes.add(p)


    def receive(msg='leave', from_=p):
        output('Leave operation completed for ', p)
        nodes.remove(p)


    def crash_node(p):
        send(('crash-request', p), to=certifier)


    def receive(msg=('perform-crash',p)):
        crash_nodes.add(p)


    def test_read(p):
        send('read', to= p)
        send(('read',p), to=certifier)


    def receive(msg=('return',temp), from_=p):
        output('read returns with value ', temp)
        # p is no longer in use, so remove it from the in_use set
        in_use.remove(p)
      

    def test_write(p,val):
        output('test write start')
        send(('write',val), to= p)
        send(('write',val,p), to= certifier)

      
    def receive(msg=('ack'), from_=p):
        output('write returned an ack from: ', p)
        # p is no longer in use, so remove it from the in_use set
        in_use.remove(p)


    def receive(msg = ('bcast',m), from_=pid):
        send(m, to=nodes-crash_nodes)


    def receive(msg=('metrics', ct, mem), from_=pid):
        # Check eventual consistency of all left nodes
        if len(mem) > len(nodes) and pid not in crash_nodes:
            # output('Test Failed!!!', pid, 'has "{0}" Joined nodes, actual count "{1}"'.format(mem_count, len(nodes)))
            output('Test Failed!!!', pid, 'has left nodes', mem - nodes)
            success &= False

    def receive(msg = 'done'):
        -- fds
        output('done received by scheduler')
        output('total nodes in the system',nodes)
        send('done', to= nodes)

def reset_globals(cc):
    DELTA = cc["DELTA"]["default"]
    ALPHA = cc["ALPHA"]["default"]
    BETA = cc["BETA"]["default"]
    GAMMA = cc["GAMMA"]["default"]
    NUM_NODES = cc["NODE_COUNT"]["default"]
    D = cc["D"]["default"]
    RETEN_COUNT = cc["RETEN_COUNT"]["default"]
    return ALPHA, BETA, GAMMA, DELTA, NUM_NODES, D,RETEN_COUNT


# ---------------------------------------- #
#                   MAIN                   #
# ---------------------------------------- #
def main():
    config(clock = Lamport)
    REPS = 1
    config_name = "paxos"
    with open("results.csv", "a") as f:
        st = ", ".join(["ALPHA", "BETA", "GAMMA", "DELTA", "NUM_NODES", "D", "RETEN_COUNT", "CPU TIME AVG", "READ TIME", "WRITE TIME", "JOIN TIME"])
        f.write(st + "\n")
    custom_config = configparser.ConfigParser()
    custom_config.read('config.ini')
    ALPHA, BETA, GAMMA, DELTA, NUM_INIT_NODE, D, RETEN_COUNT = reset_globals(custom_config)
    output("RETEN_COUNT is", RETEN_COUNT)
    #####################################################################################
    ## Test Different parameters
    #####################################################################################
    NUM_NODES = float(custom_config["NODE_COUNT"]["value_start"])
    while(NUM_NODES<=float(custom_config["NODE_COUNT"]["value_end"])):
        output("*******************NUM_NODES*******************", NUM_NODES)
        certifier = new(certify.Certifier, (ALPHA, BETA, GAMMA, DELTA, NUM_NODES, D, RETEN_COUNT, config_name))
        scheduler = new(Scheduler,(certifier, ALPHA, BETA, GAMMA, DELTA, NUM_NODES, D, RETEN_COUNT, config_name))
        start(certifier)
        start(scheduler)
        time.sleep(45)
        send('done', to= scheduler)
        output('sent done to scheduler at', time.time())
        send(('checkCorrectness'), to=certifier)
        output('sent check correctness to Certifier')
        await(some(received(('finish'), from_=certifier)))
        NUM_NODES += float(custom_config["NODE_COUNT"]["step_size"])


  